{"version":3,"file":"static/js/908.1e8feb39.chunk.js","mappings":"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","sources":["Hooks/useNetwork.js","pages/Details/components/BackButton.jsx","pages/Details/components/Info.jsx","pages/Details/Details.jsx","pages/Errors/OfflinePage.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nexport const useNetwork = () => {\r\n  const [isOnline, setOnline] = useState(true);\r\n\r\n  function updateNetworkStatus() {\r\n    setOnline(navigator.onLine);\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"online\", updateNetworkStatus);\r\n    window.addEventListener(\"offline\", updateNetworkStatus);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"online\", updateNetworkStatus);\r\n      window.removeEventListener(\"offline\", updateNetworkStatus);\r\n    };\r\n  }, []);\r\n\r\n  return isOnline;\r\n};\r\n","import styled from \"styled-components\";\r\nimport { IoArrowBack } from \"react-icons/io5\";\r\n\r\nconst Button = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 0.5rem;\r\n  padding: 0 2.1rem;\r\n  margin-top: 0.5rem;\r\n  color: var(--colors-text);\r\n  background-color: var(--colors-ui-base);\r\n  border-radius: var(--radius);\r\n  border: none;\r\n  box-shadow: var(--shadow);\r\n  line-height: 2.8;\r\n  cursor: pointer;\r\n  font-size: var(--fs-sm);\r\n`;\r\n\r\nexport default function BackButton({ handleBackNavigation }) {\r\n  return (\r\n    <Button onClick={handleBackNavigation}>\r\n      <IoArrowBack size={20} />\r\n      Back\r\n    </Button>\r\n  );\r\n}","import { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getCountryDetails,\r\n  getBorderCountryDetails,\r\n  selectedCountryDetails,\r\n} from \"../../../slices/countriesSlice/countryDetailsSlice\";\r\nimport { lazy, Suspense } from \"react\";\r\nimport { LoadingDots } from \"../../../components/Loader\";\r\nimport OfflinePage from \"../../Errors/OfflinePage\";\r\nimport { useNetwork } from \"../../../Hooks/useNetwork\";\r\n\r\nconst DetailsInfo = lazy(() => import(\"./DetailsInfo/DetailsInfo\"));\r\n\r\nconst Info = () => {\r\n  const isOnline = useNetwork();\r\n  const dispatch = useDispatch();\r\n  const { name } = useParams();\r\n  const { country, status, borderCountriesNames } = useSelector(\r\n    selectedCountryDetails\r\n  );\r\n\r\n  const countryInfo = country.map((c) => ({\r\n    img: c.flags.png,\r\n    name: c.name.common,\r\n    nativeName: c.name.nativeName,\r\n    population: c.population.toLocaleString(\"en-US\"),\r\n    region: c.region,\r\n    subregion: c.subregion,\r\n    capital: c.capital,\r\n    topLevelDomain: c.tld,\r\n    currencies: c.currencies,\r\n    languages: c.languages,\r\n    borders: c.borders,\r\n  }));\r\n\r\n  function handleBorderCountry(code) {\r\n    dispatch(getBorderCountryDetails(code));\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(getCountryDetails(name));\r\n  }, [name, dispatch]);\r\n\r\n  if (status === \"loading\") {\r\n    return <LoadingDots />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isOnline ? (\r\n        <Suspense fallback={<LoadingDots />}>\r\n          <DetailsInfo\r\n            {...countryInfo[0]}\r\n            handleBorderCountry={handleBorderCountry}\r\n            borderCountriesNames={borderCountriesNames}\r\n          />\r\n        </Suspense>\r\n      ) : (\r\n        <OfflinePage />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n","import { useNavigate } from \"react-router-dom\";\r\nimport BackButton from \"./components/BackButton\";\r\nimport Info from \"./components/Info\";\r\n\r\nexport default function Details() {\r\n  const navigate = useNavigate();\r\n\r\n  function handleBackNavigation() {\r\n    navigate(-1);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <BackButton handleBackNavigation={handleBackNavigation} />\r\n      <Info />\r\n    </>\r\n  );\r\n}\r\n","import { RiWifiOffLine } from \"react-icons/ri\";\r\nimport { CenteringContainer } from \"../../components/Container\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ConnectionIcon = styled(RiWifiOffLine)`\r\n  width: 100%;\r\n  height: 30%;\r\n`;\r\n\r\nconst Title = styled.h1``;\r\n\r\nconst SubTitle = styled.h3``;\r\n\r\nconst ReloadButton = styled.button`\r\n  margin-top: 20px;\r\n  padding: 10px 20px;\r\n  background-color: var(--colors-ui-base);\r\n  box-shadow: var(--shadow);\r\n  color: var(--colors-text);\r\n  border-radius: var(--radius);\r\n  font-size: var(--fs-md);\r\n  font-weight: var(--fw-normal);\r\n  text-decoration: none;\r\n  border: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport default function OfflinePage() {\r\n  return (\r\n    <CenteringContainer>\r\n      <ConnectionIcon />\r\n      <Title>OFFLINE</Title>\r\n      <SubTitle>Please check your internet connection</SubTitle>\r\n      <ReloadButton onClick={() => window.location.reload()}>\r\n        RETRY\r\n      </ReloadButton>\r\n    </CenteringContainer>\r\n  );\r\n}\r\n"],"names":["useNetwork","isOnline","setOnline","useState","updateNetworkStatus","navigator","onLine","useEffect","window","addEventListener","removeEventListener","Button","styled","button","_templateObject","_taggedTemplateLiteral","BackButton","_ref","handleBackNavigation","_jsxs","onClick","children","_jsx","IoArrowBack","size","DetailsInfo","lazy","Info","dispatch","useDispatch","name","useParams","country","status","borderCountriesNames","useSelector","selectedCountryDetails","countryInfo","map","c","img","flags","png","common","nativeName","population","toLocaleString","region","subregion","capital","topLevelDomain","tld","currencies","languages","borders","getCountryDetails","LoadingDots","_Fragment","Suspense","fallback","handleBorderCountry","code","getBorderCountryDetails","OfflinePage","Details","navigate","useNavigate","ConnectionIcon","RiWifiOffLine","Title","h1","_templateObject2","SubTitle","h3","_templateObject3","ReloadButton","_templateObject4","CenteringContainer","location","reload"],"sourceRoot":""}